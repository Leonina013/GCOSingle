Value = 1,
NodeID = "name",
units = "Genes"
)
# Display the Sankey plot
sankey_plot
# Load required libraries
library(networkD3)
library(dplyr)
# Read the data from the CSV file
sankey_data <- read.csv("C:/rnapipeline/Analysis/Sankey.csv")
# Extract unique genes and diseases
unique_genes <- unique(sankey_data$Gene)
unique_diseases <- unique(sankey_data$Disease)
# Create data frames for nodes
gene_nodes <- data.frame(name = unique_genes, group = 1)
disease_nodes <- data.frame(name = unique_diseases, group = 2)
# Create links data frame
# Create links data frame with zero-indexed source and target
links <- sankey_data %>%
left_join(gene_nodes, by = c("Gene" = "name")) %>%
left_join(disease_nodes, by = c("Disease" = "name")) %>%
select(source = group.x - 1, target = group.y - 1)
# Read the data from the CSV file
sankey_data <- read.csv("C:/rnapipeline/Analysis/Sankey.csv")
# Extract unique genes and diseases
unique_genes <- unique(sankey_data$Gene)
unique_diseases <- unique(sankey_data$Disease)
# Create data frames for nodes
gene_nodes <- data.frame(name = unique_genes, group = 1)
disease_nodes <- data.frame(name = unique_diseases, group = 2)
# Create links data frame
# Create links data frame with zero-indexed source and target
# Create links data frame with zero-indexed source and target
links <- sankey_data %>%
left_join(gene_nodes, by = c("Gene" = "name")) %>%
left_join(disease_nodes, by = c("Disease" = "name")) %>%
mutate(source_index = group.x - 1, target_index = group.y - 1) %>%
select(source = source_index, target = target_index)
# Create the Sankey plot
sankey_plot <- sankeyNetwork(
Links = links,
Nodes = rbind(gene_nodes, disease_nodes),
Source = "source",
Target = "target",
Value = 1,
NodeID = "name",
units = "Genes"
)
# Display the Sankey plot
sankey_plot
# Load the required libraries
library(networkD3)
library(dplyr)
# Read your data from the CSV file
data <- read.csv("C:/rnapipeline/Analysis/Sankey.csv")
# Extract unique genes and diseases
genes <- unique(data$Gene)
diseases <- unique(data$Disease)
# Create a data frame for nodes
gene_nodes <- data.frame(name = genes, stringsAsFactors = FALSE)
disease_nodes <- data.frame(name = diseases, stringsAsFactors = FALSE)
# Create a data frame for links
links <- data %>%
left_join(gene_nodes, by = c("Gene" = "name")) %>%
left_join(disease_nodes, by = c("Disease" = "name")) %>%
mutate(source = match(Gene, genes) - 1, target = match(Disease, diseases) + length(genes) - 1)
# Create the Sankey plot
sankey_plot <- sankeyNetwork(
Links = links,
Nodes = rbind(gene_nodes, disease_nodes),
Source = "source",
Target = "target",
Value = 1,
NodeID = "name",
units = "Genes"
)
# Display the Sankey plot
sankey_plot
# Read your data from the CSV file
data <- read.csv("C:/rnapipeline/Analysis/Sankey.csv")
# Extract unique genes and diseases
genes <- unique(data$Gene)
diseases <- unique(data$Disease)
# Create a data frame for nodes
gene_nodes <- data.frame(name = genes, stringsAsFactors = FALSE)
disease_nodes <- data.frame(name = diseases, stringsAsFactors = FALSE)
# Create a data frame for links
links <- data %>%
left_join(gene_nodes, by = c("Gene" = "name")) %>%
left_join(disease_nodes, by = c("Disease" = "name")) %>%
mutate(source = match(Gene, genes), target = match(Disease, diseases) + length(genes))
# Create the Sankey plot
sankey_plot <- sankeyNetwork(
Links = links,
Nodes = rbind(gene_nodes, disease_nodes),
Source = "source",
Target = "target",
Value = 1,
NodeID = "name",
units = "Genes"
)
# Display the Sankey plot
sankey_plot
##deseq2Data = estimateSizeFactors(deseq2Data)
#deseq2Data = estimateDispersionsGeneEst(deseq2Data)
#dispersions(deseq2Data) = mcols(deseq2Data)$dispGeneEst
#deseq2Data = nbinomWaldTest(deseq2Data)
dim(deseq2Data)
#load the packages
install.packages("DESeq2")
library(DESeq2)
shiny::runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
runApp('scrna')
zip(file, files = plots)
# Define the server
server <- function(input, output) {
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
data <- read.delim(inFile$datapath, sep = "\t", header = TRUE)
return(data)
})
seurat_result <- eventReactive(data(), {
# Your Seurat analysis code here
# Replace this with your actual Seurat analysis code
seurat_obj <- CreateSeuratObject(counts = data(), project = "TISCH2", min.cells = 3, min.features = 200)
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", scale.factor = 10000)
seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000)
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj))
return(seurat_obj)
})
output$download_plots <- downloadHandler(
filename = function() {
paste("seurat_plots.zip")
},
content = function(file) {
# Generate a Violin Plot (you can add more plots)
vln_plot <- VlnPlot(seurat_result(), features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Save the plot as an image (you can customize the format)
ggsave(file = "vln_plot.png", vln_plot, width = 8, height = 6, units = "in")
# Create a zip file containing the plots
plots <- list("vln_plot.png")
zip(file, files = plots)
}
)
}
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
runApp('lol')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='leonina013',
token='A350043CEC15F137DD8590E6B61A2ECA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='leonina013', token='A350043CEC15F137DD8590E6B61A2ECA', secret='OvixSpSjgm8tYEKYSJW0mA/GMDxDDUptIu6mjIa5')
library(rsconnect)
rsconnect::deployApp('C:/app.R')
rsconnect::deployApp('C:/Users/KIIT/OneDrive/Documents/lol/app.R')
rsconnect::deployApp('C://app.R')
rsconnect::deployApp('C:/app.R')
rsconnect::deployApp('C:/')
rsconnect::deployApp('C:/Users/KIIT/OneDrive/Documents/lol')
rsconnect::deployApp('C:/Users/KIIT/OneDrive/Documents/lol')
rsconnect::deployApp('C:/lol')
rsconnect::deployApp('C:/lol')
rsconnect::setAccountInfo(name='leonina013', token='A350043CEC15F137DD8590E6B61A2ECA', secret='OvixSpSjgm8tYEKYSJW0mA/GMDxDDUptIu6mjIa5')
library(rsconnect)
rsconnect::deployApp('C:/lol')
rsconnect::deployApp('C:/lol')
rsconnect::deployApp('C:/lol')
rsconnect::deployApp('C:/lol', appName = "lolapp")
rsconnect::deployApp('C:/lol', appName = "lolapp.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
## ----LoadPackageToDetermineVersion,echo=FALSE,message=FALSE,results='hide'----
options(width=65)
set.seed(0)
library(msa)
library(seqinr)
msaVersion <- packageDescription("msa")$Version
msaDateRaw <- packageDescription("msa")$Date
msaDateYear <- as.numeric(substr(msaDateRaw, 1, 4))
msaDateMonth <- as.numeric(substr(msaDateRaw, 6, 7))
msaDateDay <- as.numeric(substr(msaDateRaw, 9, 10))
msaDate <- paste(month.name[msaDateMonth], " ",
msaDateDay, ", ",
msaDateYear, sep="")
## ----SimpleExFileNames-----------------------------------------
mySequenceFile <- system.file("C:\blast.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequences
mySequences <- readDNAStringSet(mySequenceFile)
## ----SimpleExFileNames-----------------------------------------
mySequenceFile <- system.file("C:/blast.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
# Install and load the required packages
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Bioconductor/DECIPHER")
library(Biostrings)
library(DECIPHER)
# Read the consensus and query sequences
consensus_seq <- readDNAStringSet("C:/bowtie2-2.5.2/bowtie2-2.2.5/PROT/consensus.fasta")
query_seq <- readDNAStringSet("C:/bowtie2-2.5.2/bowtie2-2.2.5/PROT/query.fasta")
# Align the sequences (you can choose a different alignment method if needed)
alignment <- pairwiseAlignment(consensus_seq, query_seq)
library(Biostrings)
# Read the consensus and query sequences
consensus_seq <- readAAStringSet("C:/bowtie2-2.5.2/bowtie2-2.2.5/PROT/consensus.fasta")
query_seq <- readAAStringSet("C:/bowtie2-2.5.2/bowtie2-2.2.5/PROT/query.fasta")
# Create an alignment
alignment <- pairwiseAlignment(consensus_seq, query_seq)
# Read the consensus and query sequences
consensus_seq <- readAAStringSet("C:/bowtie2-2.5.2/bowtie2-2.2.5/PROT/consensus.fasta")
query_seq <- readAAStringSet("C:/bowtie2-2.5.2/bowtie2-2.2.5/PROT/query.fasta")
# Initialize a list to store alignment results
alignments <- list()
# Loop through each query sequence and perform pairwise alignment
for (i in 1:length(query_seq)) {
alignment <- pairwiseAlignment(consensus_seq[[1]], query_seq[[i]])
alignments[[i]] <- alignment
}
# Extract the aligned sequences
aligned_consensus <- subject(alignments)
# Extract the aligned sequences
aligned_consensus <- sapply(alignments, function(aln) subject(aln), USE.NAMES = FALSE)
aligned_query <- sapply(alignments, function(aln) query(aln), USE.NAMES = FALSE)
# Extract the aligned sequences
aligned_consensus <- sapply(alignments, function(aln) subject(aln), USE.NAMES = FALSE)
aligned_query <- sapply(alignments, function(aln) query(aln), USE.NAMES = FALSE)
# Extract the aligned sequences
aligned_consensus <- sapply(alignments, function(aln) aln[[1]])
aligned_query <- sapply(alignments, function(aln) aln[[2]])
# Extract the aligned sequences
aligned_consensus <- sapply(alignments, function(aln) subject(aln))
aligned_query <- sapply(alignments, function(aln) query(aln))
# Extract the aligned sequences
aligned_consensus <- sapply(alignments, function(aln) subject(aln@subject))
install.packages("SeuratObject")
P6 <- readRDS("C:/SCPS/Pros/P6.rds")
str(prostate6)
str(P6)
prostate6 <- readRDS("C:/SCPS/Pros/P6.rds")
# count matrix
prostate6@assays$RNA@counts[1:10,1:10]
# 2. QC --------
prostate6[["percent.mt"]] <- PercentageFeatureSet(prostate6, pattern = "^MT-")
str(prostate6)
# Show QC metrics for the first 5 cells
head(prostate6@meta.data, 5)
# ___Visualize QC metrics as a violin plot -------
VlnPlot(prostate6, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# ___feature-feature or gene-gene relationship --------
plot1 <- FeatureScatter(prostate6, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(prostate6, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
prostate6 <- subset(prostate6, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
str(prostate6)
# 3. Normalization ----------
prostate6 <- NormalizeData(prostate6, normalization.method = "LogNormalize", scale.factor = 10000)
str(prostate6)
# ___identification of highly variable features ---------
prostate6 <- FindVariableFeatures(prostate6, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(prostate6), 10)
top10
# ___plot variable features with and without labels ---------
plot3 <- VariableFeaturePlot(prostate6)
plot4 <- LabelPoints(plot = plot3, points = top10, repel = TRUE)
plot3 + plot4
# 4. scaling the data (performed prior to linear dim reduction) ---------
all.genes <- rownames(prostate6)
prostate6 <- ScaleData(prostate6, features = all.genes)
str(prostate6)
# 5. Linear Dimensionality Reduction ----------
prostate6 <- RunPCA(prostate6, features = VariableFeatures(object = prostate6))
# ___Examine and visualize PCA results a few different ways -------
print(prostate6[["pca"]], dims = 1:5, nfeatures = 5)
# ___plot-1 --------
VizDimLoadings(prostate6, dims = 1:2, reduction = "pca")
# ___plot-2 --------
DimPlot(prostate6, reduction = "pca")
# ___plot-3 heatmap -------
# allows for easy exploration of the primary sources of heterogeneity in a dataset
# and can be useful when trying to decide which PCs to include for further downstream analyses
DimHeatmap(prostate6, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(prostate6, dims = 1:5, cells = 500, balanced = TRUE)
prostate6 <- JackStraw(prostate6, num.replicate = 100)
prostate6 <- ScoreJackStraw(prostate6, dims = 1:20)
JackStrawPlot(prostate6, dims = 1:15)
# An alternative heuristic method generates an ‘Elbow plot’: a ranking of principle components based on the percentage of variance explained by each one (ElbowPlot() function).
ElbowPlot(prostate6)
# 6. Cluster cells --------
prostate6 <- FindNeighbors(prostate6, dims = 1:15)
# The FindClusters() function contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters.
# We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells.
# Optimal resolution often increases for larger datasets.
prostate6 <- FindClusters(prostate6, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(prostate6), 5)
# 7. Run non-linear dimensional reduction (UMAP/tSNE) ---------
prostate6 <- RunUMAP(prostate6, dims = 1:15)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(prostate6, reduction = "umap")
# ___find all markers of cluster 1 --------
cluster1.markers <- FindMarkers(prostate6, ident.1 = 2, min.pct = 0.25)
head(cluster1.markers, n = 5)
# ___find all markers distinguishing cluster 5 from clusters 0 and 3 --------
cluster5.markers <- FindMarkers(prostate6, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
head(cluster5.markers, n = 5)
# ___find markers for every cluster compared to all remaining cells, report only the positive ones ---------
prostate6.markers <- FindAllMarkers(prostate6, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
prostate6.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_log2FC)
str(prostate6)
features <- prostate6@commands$RunPCA.RNA$features
VlnPlot(prostate6, features = c("SLC14A1", "KRT14"))
# ___VlnPlot() - you can plot raw counts as well ---------
VlnPlot(prostate6, features = c("SLC14A1", "KRT14"), slot = "counts", log = TRUE)
# ___FeaturePlot()- visualize feature expression in low-dimensional space ---------
FeaturePlot(prostate6, features = features[1:5])
# Visualize co-expression of two features simultaneously
FeaturePlot(prostate6, features = features[1:2], blend = TRUE)
# ___interactive plots --------
# Include additional data to display alongside cell names by passing in a data frame of
# information Works well when using FetchData
# works only with one feature
plot <- FeaturePlot(prostate6, features = c("CCL2"))
HoverLocator(plot = plot, information = FetchData(prostate6, vars = c("ident", "PC_1", "nFeature_RNA")))
# ___doHeatmap() --------
top10 <- prostate6.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
DoHeatmap(prostate6, features = top10$gene) + NoLegend()
# ___RidgePlot() - Visualize single cell expression distribution in each cluster -------
RidgePlot(prostate6, features = features[1:5], ncol=2)
# ___Dot plots - the size of the dot corresponds to the percentage of cells expressing the feature --------
# in each cluster. The color represents the average expression level
DotPlot(prostate6, features = features[1:5]) + RotatedAxis()
# ___Single cell heatmap of feature expression -------
DoHeatmap(subset(prostate6, downsample = 100), features = features[1:5], size = 3)
# 10. saving processed data ------
saveRDS(prostate6, file = "C:/SCPs/first.rds")
install.packages("SeuratObject")
install.packages("SeuratObject")
library(SeuratObject)
library(Seurat)
library(ggplot2)
library(patchwork)
library(tidyverse)
library(hdf5r)
install.packages("htmltools")
library(SeuratObject)
library(Seurat)
library(ggplot2)
install.packages("SeuratObject")
install.packages("devtools")
install.packages("hdf5r")
install.packages("Matrix")
install.packages("SeuratObject")
install.packages("celldex")
install.packages("SingleR")
library(SeuratObject)
library(Seurat)
install.packages("Seurat")
library(SeuratObject)
library(Seurat)
library(ggplot2)
library(patchwork)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(hdf5r)
library(SingleR)
library(celldex)
library(pheatmap)
#______________________________________ADDED ON 15/1/2024
# get reference data -----------
ref <- celldex::HumanPrimaryCellAtlasData()
remove.packages("celldex")
# Install SingleR from Bioconductor
BiocManager::install("SingleR")
BiocManager::install("celldex")
library(celldex)
tab <- table(Assigned=pred$labels, Clusters=prostate6$seurat_clusters)
# for pbmc data, we will use two datasets
hpca <- celldex::HumanPrimaryCellAtlasData()
# for pbmc data, we will use two datasets
hpca <- celldex::HumanPrimaryCellAtlasData()
library(BiocManager)
install("BiocFileCache")
install.packages("devtools")
devtools::install_version("dbplyr", version = "2.3.4")
library(dbplyr)
detach("package:dbplyr", unload = TRUE)
library(dbplyr)
library(monocle3)
BiocManager::install("monocle3")
library(monocle3)
BiocManager::install("monocle3")
library(monocle3)
BiocManager::install("monocle3")
install.packages("monocle3")
if (!requireNamespace("monocle3", quietly = TRUE)) {
install.packages("monocle3")
}
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'lme4', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'HDF5Array',
'terra', 'ggrastr'))
install.packages("devtools")
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/monocle3', lib="C:/Users/KIIT/AppData/Local/R/win-library/4.3/monocle3")
library(monocle3)
library(monocle3)
library(monocle3)
devtools::install_github('cole-trapnell-lab/monocle3', lib="C:/Users/KIIT/AppData/Local/R/win-library/4.3")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("S4Arrays")
a
devtools::install_github('cole-trapnell-lab/monocle3', lib="C:/Users/KIIT/AppData/Local/R/win-library/4.3")
shinyApp(ui, server)
library(tidyr)
shiny::runApp('saas')
runApp('C:/GCO/Demoapp')
runApp('C:/GCO/Demoapp')
shiny::runApp('C:/GCO/Demoapp')
shiny::runApp('C:/GCO/GeneCloudOmics-master')
runApp('C:/GCO/GeneCloudOmics-master')
shiny::runApp('C:/GCO/GeneCloudOmics-master')
runApp('C:/GCO/GeneCloudOmics-master')
install.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages(c("cli", "curl", "digest", "dplyr", "fansi", "fs", "ggrepel", "glue", "httpuv", "matrixStats", "promises", "Rcpp", "RcppArmadillo", "rlang", "RSQLite", "rstudioapi", "shiny", "stringi", "utf8", "vctrs"))
install.packages("lattice", lib="C:/Program Files/R/R-4.3.2/library")
install.packages("lattice", lib = "C:/Program Files/R/R-4.3.2/library")
shiny::runApp('C:/GCO')
install.packages("devtools")
install.packages("devtools")
shiny::runApp('C:/GCO/demo2')
install.packages("devtools")
install.packages("devtools")
detach("package:devtools", unload = TRUE)
remove.packages("devtools")
install.packages("devtools")
runApp('C:/GCO/demo2')
remove.packages("devtools")
install.packages("devtools")
devtools::install_version("dbplyr", version = "2.3.4")
runApp('C:/GCO/demo2')
library(dbplyr)
library(BiocManager)
library(BiocManager)
library(BiocManager)
library(BiocManager)
install("BiocFileCache")
shiny::runApp('C:/GCO/demo2')
shiny::runApp('C:/GCO/demo2')
library(BiocFileCache)
shiny::runApp('C:/GCO/demo2')
install.packages("devtools")
install.packages("devtools")
devtools::install_version("dbplyr", version = "2.3.4")
shiny::runApp('C:/GCO/demo2')
shiny::runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
runApp('saas')
shiny::runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
shiny::runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
runApp('C:/GCO/demo2')
shiny::runApp()
runApp('~/saas')
runApp('~/saas')
